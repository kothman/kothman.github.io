#+SETUPFILE: ../../html.setup
#+HTML_HEAD_EXTRA: <style>#nav-blog a::after { width: 100% !important; }</style>
#+DATE: <2024-11-18 Mon>

* Why do it that way, silly?
@@html:<div class="timestamp-pull-left">@@
<2024-11-23 Sat>
@@html:</div>@@
** Welcome to my blog!

This is an introductory post about why I made this website the way I did.

Because we live in a world where capitalism rules every moment of our waking
lives, it's advantageous for me to blog about my adventures in programming, so
that anyone with an inclination to interview or hire me might better understand
my dedication to the craft. Also, it's a nice way to do a retrospective on what
I've accomplished, what I've learned, and what I might do differently next time.

I'll start with a brief history of the tools I chose, and why I decided to use
them.  The next post will get into the nitty gritty, step by step analysis of
each piece of code I wrote, and why I foolishly thought each decision was a good
one.

So, here's how I made the website you're currently viewing, using two ancient and
obscure tools: [[https://www.gnu.org/software/emacs/][Emacs]] and [[https://orgmode.org/][Org-Mode]]. If you don't know what these are, don't
worry, because that's what I'll be covering first.

** Emacs [sounds like: eeeee-max]
What the hell is Emacs, anyway? I know I'm throwing some unfamiliar terminology
at you, but bear with me.

Emacs is a text editor. Well, sort of. It's also customizable to its core, and,
even though many consider it a relic of the past, it's still widely used. By a
small subsets of programmers between the ages of 50-100.

*** TODO Picture here

With its first public release in [[https://www.gnu.org/software/emacs/history.html][1985]], the idea of Emacs began [[https://www.emacswiki.org/emacs/EmacsHistory][taking shape]] when
programmers at the MIT Artificial Intelligence Laboratory wanted to make
improvements to their existing text editor, TECO. One feature that came from
this AI lab and was integral to the success of Emacs was /display-editing/, or the
ability to view changes on your screen as you typed out commands. You know,
instead of waiting for it to be printed out on a piece of paper. Another feature
was /editor macros/, or the ability to define keyboard shortcuts for a series of
commands. And from /(Text) Editor MACroS/ with /display-editing/, Emacs emerges...

None of this is really important, but still interesting I think.

All that to say, I use an app called Emacs on my computer, to write the code
that made up this website. You may as well use Notepad or TextEdit, and would
likely have a much nicer time.

*** TODO Put some pictures here!


** Org-Mode [sounds like... org-mode]
If, for whatever reason, you thought this would be some newfangled technology,
think again!

Org-Mode is a feature built into Emacs for creating helpful organizational
documents. Think outlines, to-do lists, research papers, and so on. If you've
worked with markdown, it's kind of of similar. Sort of. Its initial release was
in 2003.

*** TODO Picture here of org-mode syntax, and maybe markdown syntax?

Each page on this website is more or less written as a text file. Org-Mode
provides an interesting feature for converting these org files into HTML
ones. HTML files simply define the structure of a website page, including all of
the information you're viewing, like this text here!

*** TODO Put some pictures here!

*** TODO Put a link to an org file example?



** So... Why?

Why would I decide to use tools that are quite old, have a dwindling user-base,
and often leave me frustrated trying to figure out basic functionality?

Great question. I could tell you that I enjoy a challenge, or that it's a good learning experience, and that wouldn't be untrue.

Honestly, my computer's just old. Old, slow, and still kickin'!

A 2014 MacBook Air, with 4 gigs of ram and a sad excuse for a keyboard, had new
life breathed into it after I replaced the operating system with Linux Mint (a
free operating system, as opposed to MacOS or Windows). All of a sudden I could
boot up the laptop quickly and browse the internet without /as much/ lag. I was
ecstatic.

And then, I tried running Visual Studio Code, the main application I would be
programming in. Maybe there's something I missed, like turning off all the
important features, but it was still too slow for me to handle. 5-10 seconds is
a painful amount of time to wait to view a small change.

But Emacs... Emacs isn't slow... Emacs starts up pretty quickly, doesn't lag
much. And, what's this? I can natively compile my plugins, too?

Now we're talkin'.

** Building out the site

Native compiling, you ask? Oh, that just makes computer go fast. Well,
faster. Maybe I'll talk about it in a later blog post, but I promise. It's very
cool.

My goal in this project was to create a streamlined and simplified process for
editing and publishing text files as a website. As we've established, I enjoy
punishing myself by learning to use old, obscure tools while trying to finish an
otherwise simple project, and most of my effort was spent in this regard. 



Org-Mode provides that handy-dandy feature to convert all my org files into HTML
files. It's especially useful if you want your website to look like as dry and
boring as possible, with extra, unnecessary features.


